# -*- coding: utf-8 -*-
"""Automatisation Suivi Quotidien.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JIiCd0fDOwDSUrfdeMsSQr0F1PTc-sah
"""

#packages
import pandas as pd
import xlrd
import datetime

!pip install gspread

!pip install oauth2client

from google.colab import auth
auth.authenticate_user()
import gspread
from oauth2client.client import GoogleCredentials
gc = gspread.authorize(GoogleCredentials.get_application_default())

#Function 1 : Rapport journalier 
def extract_rapport_journalier(file_path):
  mon_dictionnaire = {}
  df = pd.read_excel(file_path , sheet_name='RAPPORT')
  df = df.fillna(0)
  #Replace /n with space
  df = df.replace('\n',' ', regex=True)
  ind_tonnage_trains_déchargés = [(df[col][df[col].eq('Tonnage Trains Déchargé')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('Tonnage Trains Déchargé')].index))]
  ind_nb_trains_déchargés = [(df[col][df[col].eq('Nbre.Trains Déchargés')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('Nbre.Trains Déchargés')].index))]
  ind_nb_trains_réalisés = [(df[col][df[col].eq('Nbre.trains réalisés')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('Nbre.trains réalisés')].index))]
  ind_tonnage_mesuré = [(df[col][df[col].eq('3-4-TONNAGE  MESURE ')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('3-4-TONNAGE  MESURE ')].index))]
  ind_annoncés_tonnage = [(df[col][df[col].eq('Total  annoncé fin mois ')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('Total  annoncé fin mois ')].index))]
  ind_non_prêts_charger = [(df[col][df[col].eq('III - EN ATTENTE ( Navires non prêts à charger )  :')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('III - EN ATTENTE ( Navires non prêts à charger )  :')].index))]
  ind_prêts_charger = [(df[col][df[col].eq('II - EN ATTENTE ( Navires prêts à charger )  :')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('II - EN ATTENTE ( Navires prêts à charger )  :')].index))]
  ind_3eme_lot = [(df[col][df[col].eq('3ème lôt')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('3ème lôt')].index))]

  value1 = df.iloc[ind_tonnage_trains_déchargés[0][0]+1][ind_tonnage_trains_déchargés[0][1]]
  value2 = df.iloc[ind_nb_trains_déchargés[0][0]+1][ind_nb_trains_déchargés[0][1]]
  value3 = df.iloc[ind_nb_trains_réalisés[0][0]+1][ind_nb_trains_réalisés[0][1]]
  value4 = df.iloc[ind_tonnage_mesuré[0][0]+2][ind_tonnage_mesuré[0][1]+10]
  value5 = df.iloc[ind_annoncés_tonnage[0][0]][ind_annoncés_tonnage[0][1]+2]
  value6 = df.iloc[ind_non_prêts_charger[0][0]+9][ind_non_prêts_charger[0][1]+2]
  value7 = df.iloc[ind_prêts_charger[0][0]+17][ind_prêts_charger[0][1]+2]
  value8 = df.iloc[ind_3eme_lot[0][0]-1][ind_3eme_lot[0][1]]
  value9 = df.iloc[ind_3eme_lot[0][0]-2][ind_3eme_lot[0][1]]

  mon_dictionnaire = {"tonnage_trains_déchargés": value1, "nb_trains_déchargés": value2, "nb_trains_réalisés": value3, "tonnage_mesuré": value4, "annoncés_tonnage": value5, "non_prêts_charger": value6, "prêts_charger": value7, "stock_prenable_7h00": value8, "stock_prenable_mort_7h00": value9}
  return mon_dictionnaire

#Function 2 : Suivi de production
def extract_suivi_production(file_path, sheet_name, date):
  mon_dictionnaire = {}
  df = pd.read_excel(file_path , sheet_name=sheet_name)
  #Replace /n with space
  df = df.replace('\n',' ', regex=True)
  ind_prod_s = [(df[col][df[col].eq('Production Soufre Liq')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('Production Soufre Liq')].index))]
  ind_prod_p54 = [(df[col][df[col].eq('Production P2O5 54%')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('Production P2O5 54%')].index))]
  ind_prod_p30 = [(df[col][df[col].eq('Production P2O5 30%')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('Production P2O5 30%')].index))]
  ind_prod_h2so4 = [(df[col][df[col].eq('Production H2SO4')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('Production H2SO4')].index))]
  ind_prod_tsp = [(df[col][df[col].eq('Production TSP')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('Production TSP')].index))]

  day = int(date[0:2])
  value1 = df.iloc[ind_prod_s[0][0]+day+1][ind_prod_s[0][1]]
  value2 = df.iloc[ind_prod_p54[0][0]+day+1][ind_prod_p54[0][1]+3]
  value3 = df.iloc[ind_prod_p30[0][0]+day+1][ind_prod_p30[0][1]+3]
  value4 = df.iloc[ind_prod_h2so4[0][0]+day+1][ind_prod_h2so4[0][1]+3]
  value5 = df.iloc[ind_prod_tsp[0][0]+day+1][ind_prod_tsp[0][1]]
  mon_dictionnaire = {"prod_soufre_liq": value1, "prod_P2O5_54": value2, "prod_P2O5_30": value3, "prod_H2SO4": value4, "prod_TSP": value5}
  return mon_dictionnaire

#Function 3 : Simulations
def extract_simulations(file_path, sheet1, sheet2, sheet3, date):
  mon_dictionnaire = {}
  df1 = pd.read_excel(file_path, sheet_name=sheet1)
  df2 = pd.read_excel(file_path, sheet_name=sheet2)
  df3 = pd.read_excel(file_path, sheet_name=sheet3)
  df1 = df1.fillna(0)
  df2 = df2.fillna(0)
  df3 = df3.fillna(0)

  dt_stamp = datetime.datetime(int(date[6:]), int(date[3:5]), int(date[:2]))
  ind_date_1 = [(df1[col][df1[col].eq(dt_stamp)].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq(dt_stamp)].index))]
  ind_date_2 = [(df2[col][df2[col].eq(dt_stamp)].index[i], df2.columns.get_loc(col)) for col in df2.columns for i in range(len(df2[col][df2[col].eq(dt_stamp)].index))]
  ind_date_3 = [(df3[col][df3[col].eq(dt_stamp)].index[i], df3.columns.get_loc(col)) for col in df3.columns for i in range(len(df3[col][df3[col].eq(dt_stamp)].index))]

  #Stock ACP à ICS/PI à 7h. (TS)
  ind_stock_ACP = [(df1[col][df1[col].eq('Stock ACP à ICS/PI à 7h. (TS)')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('Stock ACP à ICS/PI à 7h. (TS)')].index))]
  N = (df1.iloc[ind_date_1[0][0]][ind_stock_ACP[0][1]])*0.535
  BG_special_BG = (df1.iloc[ind_date_1[0][0]][ind_stock_ACP[0][1]+1] + df1.iloc[ind_date_1[0][0]][ind_stock_ACP[0][1]+2])*0.535
  FeeD = (df1.iloc[ind_date_1[0][0]][ind_stock_ACP[0][1]+3])*0.535
  Low_Sulfate = (df1.iloc[ind_date_1[0][0]][ind_stock_ACP[0][1]+4])*0.535
  mon_dictionnaire["N"] = N
  mon_dictionnaire["BG_special_BG"] = BG_special_BG
  mon_dictionnaire["FeeD"] = FeeD
  mon_dictionnaire["Low_Sulfate"] = Low_Sulfate

  #Brouettage usine-port (TS)
  ind_brouettage = [(df1[col][df1[col].eq('Brouettage usine-port (TS)')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('Brouettage usine-port (TS)')].index))]
  total_brouettage = (df1.iloc[ind_date_1[0][0]][ind_brouettage[0][1]+9])*0.535
  mon_dictionnaire["total_brouettage"] = total_brouettage

  #Transfert
  ind_transfert = [(df2[col][df2[col].eq('Transfert')].index[i], df2.columns.get_loc(col)) for col in df2.columns for i in range(len(df2[col][df2[col].eq('Transfert')].index))]
  total_transfert = df2.iloc[ind_date_2[0][0]][ind_transfert[0][1]+4]
  mon_dictionnaire["total_transfert"] = total_transfert

  #Stock port
  ind_stock_port = [(df2[col][df2[col].eq('Stock port')].index[i], df2.columns.get_loc(col)) for col in df2.columns for i in range(len(df2[col][df2[col].eq('Stock port')].index))]
  total_stock_port = df2.iloc[ind_date_2[0][0]][ind_stock_port[1][1]+2]
  mon_dictionnaire["total_stock_port"] = total_stock_port

  #Déchargement
  ind_dechargement = [(df3[col][df3[col].eq('Déchargement')].index[i], df3.columns.get_loc(col)) for col in df3.columns for i in range(len(df3[col][df3[col].eq('Déchargement')].index))]
  valeur = df3.iloc[ind_date_3[0][0]][ind_dechargement[0][1]]
  mon_dictionnaire["dechargement"] = valeur
  return mon_dictionnaire

#Function 4 : Reporting Gantour
def read_reporting_gantour(file,date):
  reporting_gantour = {}
  date = datetime.datetime.strptime(date , "%d/%m/%Y").strftime("%Y-%m-%d")
  df = pd.read_excel(file,sheet_name='Suivi production')
  df= df.drop(['EXTRACTION',	'Benguerir', 10325], 1)
  ind = [(df[col][df[col].eq(date)].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq(date)].index))]

  Gantour = df.copy()

  k_ext = Gantour.columns.get_loc('EXTRACTION.1')
  extract_BG = Gantour.iloc[ind[0][0]][k_ext]
  extract_BOUCHANE = Gantour.iloc[ind[0][0]][k_ext+2]
  extract_MZINDA = Gantour.iloc[ind[0][0]][k_ext+3]

  reporting_gantour['extract_BG'] = extract_BG
  reporting_gantour['extract_BOUCHANE'] = extract_BOUCHANE
  reporting_gantour['extract_MZINDA'] = extract_MZINDA

  k_crib = Gantour.columns.get_loc('CRIBLAGE')
  criblage_BG = Gantour.iloc[ind[0][0]][k_crib]
  criblage_BOUCHANE = Gantour.iloc[ind[0][0]][k_crib+2]
  criblage_MZINDA = Gantour.iloc[ind[0][0]][k_crib+3]

  reporting_gantour['criblage_BG'] = criblage_BG
  reporting_gantour['criblage_BOUCHANE'] = criblage_BOUCHANE
  reporting_gantour['criblage_MZINDA'] = criblage_MZINDA

  k_trait = Gantour.columns.get_loc('TRAITEMENT')
  benificiation = Gantour.iloc[ind[0][0]][k_trait]
  sechage = Gantour.iloc[ind[0][0]][k_trait+1]
  calcination = Gantour.iloc[ind[0][0]][k_trait+2]

  reporting_gantour['lavage_OIG'] = benificiation
  reporting_gantour['sechage_OIG'] = sechage
  reporting_gantour['calcination_OIG'] = calcination

  k_repr = Gantour.columns.get_loc('Reprise')
  reprise_BG = Gantour.iloc[ind[0][0]][k_repr]
  reprise_BOUCHANE = Gantour.iloc[ind[0][0]][k_repr+2]
  reprise_MZINDA = Gantour.iloc[ind[0][0]][k_repr+3]

  reporting_gantour['reprise_BG'] = reprise_BG
  reporting_gantour['reprise_BOUCHANE'] = reprise_BOUCHANE
  reporting_gantour['reprise_MZINDA'] = reprise_MZINDA
  return reporting_gantour

#Function 5 : BI Daily OIK
def extract_BI_OIK(file_path, date):
  reporting_OIK = {}
  day = int(date[0:2])
  sheets = ['Extraction','Epierrage','Lavage','Séchage','Reprise']
  for sheet in sheets:
    df = pd.read_excel(file_path , sheet_name=sheet)
    df = df.fillna(0)
    ind = [(df[col][df[col].eq('BA')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('BA')].index))]
    mea = sheet + '_' + 'MEA'
    ba = sheet + '_' + 'BA'
    daoui = sheet + '_' + 'DAOUI'
    sc = sheet + '_' + 'SC'
    if sheet not in ['Séchage','Lavage']:
      reporting_OIK[ba] = df.iloc[ind[0][0]+day,ind[0][1]]
      reporting_OIK[daoui] = df.iloc[ind[0][0]+day,ind[0][1]+1]
      reporting_OIK[mea] = df.iloc[ind[0][0]+day,ind[0][1]+2]
      reporting_OIK[sc] = df.iloc[ind[0][0]+day,ind[0][1]+3]
    elif sheet == 'Lavage':
      ind = [(df[col][df[col].eq('MEA')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('MEA')].index))]
      reporting_OIK[mea] = df.iloc[ind[0][0]+day,ind[0][1]]
      reporting_OIK[ba] = df.iloc[ind[0][0]+day,ind[0][1]+1]
      reporting_OIK[daoui] = df.iloc[ind[0][0]+day,ind[0][1]+2]
    elif sheet == 'Séchage':
      ind = [(df[col][df[col].eq('BENI IDIR')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('BENI IDIR')].index))]
      bi = sheet + '_' + 'BI'
      dws = sheet + '_' + 'DWS'
      reporting_OIK[bi] = df.iloc[ind[0][0]+day,ind[0][1]]
      reporting_OIK[dws] = df.iloc[ind[0][0]+day,ind[0][1]+1]
  return reporting_OIK

#Function 6 : Situation journalière
def extract_situation_journaliere(file_path):
  mon_dictionnaire = {}
  df = pd.read_excel(file_path)
  df = df.fillna(0)
  #Qté Souffre Annoncée
  ind_sfr = [(df[col][df[col].eq('C) SOUFRE/AMMONIAC/ACS /KCL')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('C) SOUFRE/AMMONIAC/ACS /KCL')].index))]
  i = ind_sfr[0][0]+2
  valeur1 = 0
  f = True
  while f == True:
    while df.iloc[i][ind_sfr[0][1]] == 'SFR SLD':
      valeur1 += df.iloc[i][ind_sfr[0][1]+3]
      i += 1
      f = True
    f = False
  mon_dictionnaire["Quantité SFR SLD"] = valeur1

  #Tonnage Soufre en Rade (TS)
  ind_sfr_rade = [(df[col][df[col].eq('Tonnage  Soufre en rade ')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('Tonnage  Soufre en rade ')].index))]
  valeur2 = df.iloc[ind_sfr_rade[0][0]][ind_sfr_rade[0][1]+3]
  mon_dictionnaire["Tonnage Soufre en Rade "] = valeur2

  #Reste Soufre à Décharger aux Quais
  ind_reste_sfr = [(df[col][df[col].eq('Reste Soufre à décharger aux quais ')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('Reste Soufre à décharger aux quais ')].index))]
  valeur3 = df.iloc[ind_reste_sfr[0][0]][ind_reste_sfr[0][1]+3]
  mon_dictionnaire["Reste Soufre à Décharger aux Quais"] = valeur3

  #Tonnage Engrais en Rade
  ind_engrais_rade = [(df[col][df[col].eq('Tonnage Engrais en rade')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('Tonnage Engrais en rade')].index))]
  valeur3 = df.iloc[ind_engrais_rade[0][0]][ind_engrais_rade[0][1]+3]
  mon_dictionnaire["Tonnage Engrais en rade"] = valeur3

  #Reste à charger aux quais Engrais
  ind_reste_quais = [(df[col][df[col].eq('Reste à charger aux quais ')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('Reste à charger aux quais ')].index))]
  valeur4 = df.iloc[ind_reste_quais[0][0]][ind_reste_quais[0][1]+2]
  mon_dictionnaire["Reste à charger aux quais engrais"] = valeur4

  #Tonnage Phosphate en rade
  ind_phos_rade = [(df[col][df[col].eq('Tonnage Phosphate en rade')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('Reste à charger aux quais ')].index))]
  valeur5 = df.iloc[ind_phos_rade[0][0]][ind_phos_rade[0][1]+3]
  mon_dictionnaire["Tonnage Phosphate en rade"] = valeur5

  #Reste à charger aux quais Phosphate
  valeur6 = df.iloc[ind_reste_quais[0][0]][ind_reste_quais[0][1]+3]
  mon_dictionnaire["Reste à charger aux quais phos"] = valeur6

  #Tonnage  Acide en rade 
  ind_acide_rade = [(df[col][df[col].eq('Tonnage  Acide en rade ')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('Tonnage  Acide en rade ')].index))]
  valeur7 = df.iloc[ind_acide_rade[0][0]][ind_acide_rade[0][1]+3]
  mon_dictionnaire["Tonnage Acide en rade"] = valeur7

  #Reste Acide à charger aux quais 
  ind_acide_quais = [(df[col][df[col].eq('Reste Acide à charger aux quais ')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('Reste Acide à charger aux quais ')].index))]
  valeur8 = df.iloc[ind_acide_quais[0][0]][ind_acide_quais[0][1]+3]
  mon_dictionnaire["Reste Acide à charger aux quais"] = valeur8  

  #Navires attendus Export Dry (!= PHOS)
  ind_nav_attendus = [(df[col][df[col].eq('IV- Navires attendus')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('IV- Navires attendus')].index))]
  i = ind_nav_attendus[0][0]+3
  valeur9 = 0
  f = True
  while f == True:
    while df.iloc[i][ind_nav_attendus[0][1]] != 'B) Export Liquide':
      if 'PHOS' not in df.iloc[i][ind_nav_attendus[0][1]]:
        valeur9 += df.iloc[i][ind_nav_attendus[0][1]+3]
        i += 1
      else:
        i += 1
      f = True
    f = False
  mon_dictionnaire["Somme engrais"] = valeur9

#Navires attendus Export Dry (= PHOS)
  i = ind_nav_attendus[0][0]+3
  valeur10 = 0
  f = True
  while f == True:
    while df.iloc[i][ind_nav_attendus[0][1]] != 'B) Export Liquide':
      if 'PHOS' in df.iloc[i][ind_nav_attendus[0][1]]:
        valeur10 += df.iloc[i][ind_nav_attendus[0][1]+3]
        i += 1
      else:
        i += 1
      f = True
    j = i
    f = False
  mon_dictionnaire["Somme phosphates"] = valeur10

#Navires attendus Export Liquide
  valeur11 = 0
  f = True
  while f == True:
    while df.iloc[j+2][ind_nav_attendus[0][1]] != 'C) SOUFRE/AMMONIAC/ACS /KCL':
        valeur11 += df.iloc[j+2][ind_nav_attendus[0][1]+3]
        j += 1
        f = True
    f = False
  mon_dictionnaire["Somme quantités Navires attendus Export Liquide"] = valeur11*0.535

  #ACS Navires en chargement/Déchargement
  ind_import_sfr1 = [(df[col][df[col].eq("C) Import (SOUFRE/AMMONIAC/ACS/KCL)")].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('C) Import (SOUFRE/AMMONIAC/ACS/KCL)')].index))]
  valeur12 = 0
  i = ind_import_sfr1[0][0]+2
  f = True
  while f == True:
    while df.iloc[i][ind_import_sfr1[0][1]] != 'Tonnage Soufre déchargé 07H00':
      if df.iloc[i][ind_import_sfr1[0][1]] == 'ACS':
        valeur12 += df.iloc[i][ind_import_sfr1[0][1]+3] - df.iloc[i][ind_import_sfr1[0][1]+9]
        i += 1
      else:
        i += 1
      f = True
    f = False
  mon_dictionnaire["Somme ACS reste à charger"] = valeur12

  #ACS Navires en attente
  ind_import_sfr2 = [(df[col][df[col].eq('C) Import (SOUFRE/AMMONIAC/ACS /KCL)')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('C) Import (SOUFRE/AMMONIAC/ACS /KCL)')].index))]
  valeur13 = 0
  i = ind_import_sfr2[0][0]+2
  f = True
  while f == True:
    while df.iloc[i][ind_import_sfr2[0][1]] != 'Tonnage  Soufre en rade ':
      if df.iloc[i][ind_import_sfr2[0][1]] == 'ACS':
        valeur13 += df.iloc[i][ind_import_sfr2[0][1]+3]
        i += 1
      else:
        i += 1
      f = True
    f = False
  mon_dictionnaire["Somme ACS en attente"] = valeur13

  #ACS Navires attendus
  ind_import_sfr3 = [(df[col][df[col].eq('C) SOUFRE/AMMONIAC/ACS /KCL')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('C) SOUFRE/AMMONIAC/ACS /KCL')].index))]
  valeur14 = 0
  i = ind_import_sfr3[0][0]+2
  f = True
  while f == True:
    while df.iloc[i][ind_import_sfr3[0][1]] != 0:
      if df.iloc[i][ind_import_sfr3[0][1]] == 'ACS':
        valeur14 += df.iloc[i][ind_import_sfr3[0][1]+3]
        i += 1
      else:
        i += 1
      f = True
    f = False
  mon_dictionnaire["Somme ACS attendus"] = valeur14
  #Chargement Engrais
  ind_charg_N = [(df[col][df[col].eq('Tonnage chargé 07H00')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('Tonnage chargé 07H00')].index))]
  valeur15= df.iloc[ind_charg_N[0][0]][ind_charg_N[0][1]+2]
  mon_dictionnaire["Chargement Engrais"] = valeur15
  return mon_dictionnaire

extract_situation_journaliere('/content/Situation journalière du 25-08-2021.xlsx')

#Function 7 : Situation Excel
def extract_situation_excel(file_path,date):
  mon_dictionnaire = {}
  df1 = pd.read_excel(file_path)
  df1 = df1.fillna(0)
  dt_stamp = datetime.datetime(int(date[6:]), int(date[3:5]), int(date[:2]))
  inddate = [(df1[col][df1[col].eq(dt_stamp)].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq(dt_stamp)].index))]
  #Production Soufre Liquide
  ind_prod_sfr = [(df1[col][df1[col].eq('PRODUCTION SOUFRE LIQUIDE')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('PRODUCTION SOUFRE LIQUIDE')].index))]
  valeur1 = df1.iloc[ind_prod_sfr[0][0]][inddate[1][1]]
  mon_dictionnaire["Production Soufre Liquide"] = valeur1
  #Chargement Phosphate
  ind_charg_phos = [(df1[col][df1[col].eq('Chargement Phosphate')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('Chargement Phosphate')].index))]
  valeur2 = df1.iloc[ind_charg_phos[0][0]][inddate[1][1]]
  mon_dictionnaire["Chargement Phosphate"] = valeur2
  #Déchargement Soufre Solide
  ind_decharg_sfr = [(df1[col][df1[col].eq('Soufre Solide')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('Soufre Solide')].index))]
  valeur3 = df1.iloc[ind_decharg_sfr[0][0]][inddate[1][1]]
  mon_dictionnaire["Déchargement Soufre Solide"] = valeur3
  #Production ACS Entités
  ind_prod_acs = [(df1[col][df1[col].eq('Production H2SO4')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('Production H2SO4')].index))]
  valeur4= df1.iloc[ind_prod_acs[0][0]][inddate[1][1]]
  valeur5= df1.iloc[ind_prod_acs[0][0]+1][inddate[1][1]]
  valeur6= df1.iloc[ind_prod_acs[0][0]+2][inddate[1][1]]
  valeur7= df1.iloc[ind_prod_acs[0][0]+3][inddate[1][1]]
  valeur8= df1.iloc[ind_prod_acs[0][0]+4][inddate[1][1]]
  valeur9= df1.iloc[ind_prod_acs[0][0]+5][inddate[1][1]]
  valeur10= df1.iloc[ind_prod_acs[0][0]+6][inddate[1][1]]
  valeur11= df1.iloc[ind_prod_acs[0][0]+7][inddate[1][1]]
  mon_dictionnaire["Production ACS Nord"] = valeur4
  mon_dictionnaire["Production ACS JFF"] = valeur5
  mon_dictionnaire["Production ACS JFO"] = valeur6
  mon_dictionnaire["Production ACS JFD"] = valeur7
  mon_dictionnaire["Production ACS JFT"] = valeur8
  mon_dictionnaire["Production ACS JFQ"] = valeur9
  mon_dictionnaire["Production ACS IMC"] = valeur10
  mon_dictionnaire["Production ACS PMP"] = valeur11
  #Production ACP29 Entités
  ind_prod_acp29 = [(df1[col][df1[col].eq('Production ACP 29%')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('Production ACP 29%')].index))]
  valeur12= df1.iloc[ind_prod_acp29[0][0]][inddate[1][1]]
  valeur13= df1.iloc[ind_prod_acp29[0][0]+1][inddate[1][1]]
  valeur14= df1.iloc[ind_prod_acp29[0][0]+2][inddate[1][1]]
  valeur15= df1.iloc[ind_prod_acp29[0][0]+3][inddate[1][1]]
  valeur16= df1.iloc[ind_prod_acp29[0][0]+4][inddate[1][1]]
  valeur17= df1.iloc[ind_prod_acp29[0][0]+5][inddate[1][1]]
  valeur18= df1.iloc[ind_prod_acp29[0][0]+6][inddate[1][1]]
  valeur19= df1.iloc[ind_prod_acp29[0][0]+7][inddate[1][1]]
  mon_dictionnaire["Production ACP29 Nord"] = valeur12
  mon_dictionnaire["Production ACP29 JFF"] = valeur13
  mon_dictionnaire["Production ACP29 JFO"] = valeur14
  mon_dictionnaire["Production ACP29 JFD"] = valeur15
  mon_dictionnaire["Production ACP29 JFT"] = valeur16
  mon_dictionnaire["Production ACP29 JFQ"] = valeur17
  mon_dictionnaire["Production ACP29 IMC"] = valeur18
  mon_dictionnaire["Production ACP29 PMP"] = valeur19
  #Production ACP54 Entités
  ind_prod_acp54 = [(df1[col][df1[col].eq('Production ACP 54% NCL')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('Production ACP 54% NCL')].index))]
  valeur20= df1.iloc[ind_prod_acp54[0][0]][inddate[1][1]]
  valeur21= df1.iloc[ind_prod_acp54[0][0]+1][inddate[1][1]]
  valeur22= df1.iloc[ind_prod_acp54[0][0]+2][inddate[1][1]]
  valeur23= df1.iloc[ind_prod_acp54[0][0]+3][inddate[1][1]]
  valeur24= df1.iloc[ind_prod_acp54[0][0]+4][inddate[1][1]]
  valeur25= df1.iloc[ind_prod_acp54[0][0]+5][inddate[1][1]]
  valeur26= df1.iloc[ind_prod_acp54[0][0]+6][inddate[1][1]]
  valeur27= df1.iloc[ind_prod_acp54[0][0]+7][inddate[1][1]]
  mon_dictionnaire["Production ACP54 Nord"] = valeur20
  mon_dictionnaire["Production ACP54 JFF"] = valeur21
  mon_dictionnaire["Production ACP54 JFO"] = valeur22
  mon_dictionnaire["Production ACP54 JFD"] = valeur23
  mon_dictionnaire["Production ACP54 JFT"] = valeur24
  mon_dictionnaire["Production ACP54 JFQ"] = valeur25
  mon_dictionnaire["Production ACP54 IMC"] = valeur26
  mon_dictionnaire["Production ACP54 PMP"] = valeur27
  #Chargement ACP
  ind_charg_acp = [(df1[col][df1[col].eq('Chargement \nACP')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('Chargement \nACP')].index))]
  valeur28=0
  for i in range(0,6):
    valeur28 += df1.iloc[ind_charg_acp[0][0]+i][inddate[1][1]]
  valeur29 = df1.iloc[ind_charg_acp[0][0]+6][inddate[1][1]]
  valeur30 = df1.iloc[ind_charg_acp[0][0]+7][inddate[1][1]]
  mon_dictionnaire["Chargement ACP JLN - JLS"] = valeur28
  mon_dictionnaire["Chargement ACP IMC"] = valeur29
  mon_dictionnaire["Chargement ACP PMP"] = valeur30
  #Production Engrais
  ind_prod_N = [(df1[col][df1[col].eq('Total NORD')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('Total NORD')].index))]
  ind_prod_JFF = [(df1[col][df1[col].eq('Total JFF')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('Total JFF')].index))]
  ind_prod_JFO = [(df1[col][df1[col].eq('Total JFO')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('Total JFO')].index))]
  ind_prod_JFD = [(df1[col][df1[col].eq('Total JFD')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('Total JFD')].index))]
  ind_prod_JFT = [(df1[col][df1[col].eq('Total JFT')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('Total JFT')].index))]
  ind_prod_JFQ = [(df1[col][df1[col].eq('Total JFQ')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('Total JFQ')].index))]
  valeur31= df1.iloc[ind_prod_N[0][0]][inddate[1][1]]
  valeur32= df1.iloc[ind_prod_JFF[0][0]][inddate[1][1]]
  valeur33= df1.iloc[ind_prod_JFO[0][0]][inddate[1][1]]
  valeur34= df1.iloc[ind_prod_JFD[0][0]][inddate[1][1]]
  valeur35= df1.iloc[ind_prod_JFT[0][0]][inddate[1][1]]
  valeur36= df1.iloc[ind_prod_JFQ[0][0]][inddate[1][1]]
  mon_dictionnaire["Production Engrais Nord"] = valeur31
  mon_dictionnaire["Production Engrais JFF"] = valeur32
  mon_dictionnaire["Production Engrais JFO"] = valeur33
  mon_dictionnaire["Production Engrais JFD"] = valeur34
  mon_dictionnaire["Production Engrais JFT"] = valeur35
  mon_dictionnaire["Production Engrais JFQ"] = valeur36
  #Export Camion
  ind_exp_camion = [(df1[col][df1[col].eq('EXPORT CAMION')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('EXPORT CAMION')].index))]
  valeur38= df1.iloc[ind_exp_camion[0][0]][inddate[1][1]]
  mon_dictionnaire["Export Camion"] = valeur38
  return mon_dictionnaire

#Function 8 : Etat de Stock
def extract_etat_stock(file_path):
  mon_dictionnaire = {}
  df1 = pd.read_excel(file_path)
  df1 = df1.fillna(0)
  #Stock total engrais
  ind_total_engrais = [(df1[col][df1[col].eq('Total engrais')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('Total engrais')].index))]
  valeur1 = df1.iloc[ind_total_engrais[0][0]][ind_total_engrais[0][1]+1]
  mon_dictionnaire["Stock engrais"] = valeur1
  #Stock total P2O5
  ind_p2o5 = [(df1[col][df1[col].eq('TOTAL P2O5')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('TOTAL P2O5')].index))]
  ind_desulfate = [(df1[col][df1[col].eq('OIJ ACP  Désulfaté P2O5')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('OIJ ACP  Désulfaté P2O5')].index))]
  valeur2 = df1.iloc[ind_desulfate[0][0]][ind_desulfate[0][1]+1]
  for i in range(0,8):
    valeur2 += df1.iloc[ind_p2o5[i][0]][ind_p2o5[0][1]+1]
  mon_dictionnaire["TOTAL P2O5"] = valeur2
  #Stock acide sulfirique
  ind_stock_as = [(df1[col][df1[col].eq('STOCK PHYSIQUE ACIDE SULFURIQUE (TMH)')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('STOCK PHYSIQUE ACIDE SULFURIQUE (TMH)')].index))]
  valeur3 = 0
  for i in range(0,8):
    valeur3 += df1.iloc[ind_stock_as[0][0]+i+1][ind_stock_as[0][1]+2]
  mon_dictionnaire["Stock acide sulfirique"] = valeur3
  #Stock Soufre solide
  ind_stock_ss = [(df1[col][df1[col].eq('STOCK Soufre solide')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('STOCK Soufre solide')].index))]
  valeur4 = df1.iloc[ind_stock_ss[0][0]+5][ind_stock_ss[0][1]+1]
  mon_dictionnaire["Stock Soufre solide"] = valeur4
  #Stock Soufre solide
  ind_stock_sl = [(df1[col][df1[col].eq('STOCK Soufre Liquide')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('STOCK Soufre Liquide')].index))]
  valeur5 = df1.iloc[ind_stock_sl[0][0]+1][ind_stock_sl[0][1]]
  mon_dictionnaire["Stock Soufre liquide"] = valeur5
  return mon_dictionnaire

#Function 9 : RJ
def extract_rj(file_path):
  mon_dictionnaire = {}
  df = pd.read_excel(file_path)
  df = df.fillna('a')
  #Stock total engrais
  ind_exp = [(df[col][df[col].eq('EXPEDTIONS')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('EXPEDTIONS')].index))]
  i = ind_exp[0][0]
  valeur1 = 0
  valeur2 = 0
  f = True
  while f == True:
    while df.iloc[i][ind_exp[0][1]] != 'PRODUIT':
      if 'PHOSPHATE' in df.iloc[i][ind_exp[0][1]+1]:
        valeur1 += df.iloc[i][ind_exp[0][1]+2]
        i += 1
      elif 'T.S.P' in df.iloc[i][ind_exp[0][1]+1]:
        valeur2 += df.iloc[i][ind_exp[0][1]+2]
        i += 1
      else:
        i += 1
      f = True
    f = False
  mon_dictionnaire["Expéditions Phosphates"] = valeur1
  mon_dictionnaire["Expéditions TSP"] = valeur2
  ind_acide_phos = [(df[col][df[col].eq('A. PHOSPHORIQUE')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('A. PHOSPHORIQUE')].index))]
  valeur3 = df.iloc[ind_acide_phos[1][0]][ind_acide_phos[0][1]+1]
  mon_dictionnaire["A. Phosphorique"] = valeur3*0.535
  ind_recp_phos = [(df[col][df[col].eq('RECEPTIONS')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('RECEPTIONS')].index))]
  i = ind_recp_phos[0][0]
  valeur4 = 0
  f = True
  while f == True:
    while df.iloc[i][ind_recp_phos[0][1]] != 'EXPEDTIONS':
      if 'PHOSPHATE' in df.iloc[i][ind_recp_phos[0][1]+1]:
        valeur4 += df.iloc[i][ind_recp_phos[0][1]+2]
        i += 1
      else:
        i += 1
      f = True
    f = False
  mon_dictionnaire["Reception Phosphates"] = valeur4
  return mon_dictionnaire

"""## **FORECAST**"""

#Function 10 : Inventory Projection
def extract_forecast_inventory(file1, date_debut, date_fin):
  mon_dictionnaire = {}
  df = pd.read_excel(file1, sheet_name='Sulfur')
  df = df.fillna(0)
  df.columns = df.columns.astype(str)
  #Fusion
  dt_stamp = datetime.datetime(int(date_debut[6:]), int(date_debut[3:5]), int(date_debut[:2]))
  ind_date_fusion = [(df[col][df[col].eq(dt_stamp)].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq(dt_stamp)].index))]
  ind_fusion = [(df[col][df[col].eq('Fusion')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('Fusion')].index))]
  list_fusion = []
  for i in range(ind_date_fusion[0][1], ind_date_fusion[0][1]+int(date_fin[:2])-int(date_debut[:2])+1):
    list_fusion += [df.iloc[ind_fusion[0][0]][i]]
  mon_dictionnaire['Fusion'] = list_fusion
  df1 = pd.read_excel(file1, sheet_name='ACS')
  df1 = df1.fillna(0)
  df1.columns = df1.columns.astype(str)
  #ACS OIJ
  ind_date = [(df1[col][df1[col].eq(dt_stamp)].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq(dt_stamp)].index))]
  ind_acs_oij = [(df1[col][df1[col].eq('OIJ')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('OIJ')].index))]
  list_acs_oij = []
  for i in range(ind_date[0][1], ind_date[0][1]+int(date_fin[:2])-int(date_debut[:2])+1):
    list_acs_oij += [df1.iloc[ind_acs_oij[0][0]][i]]
  mon_dictionnaire['Production ACS OIJ'] = list_acs_oij
  #ACS JFC1
  ind_acs_jfc1 = [(df1[col][df1[col].eq('JFC 1')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('JFC 1')].index))]
  list_acs_jfc1 = []
  for i in range(ind_date[0][1], ind_date[0][1]+int(date_fin[:2])-int(date_debut[:2])+1):
    list_acs_jfc1 += [df1.iloc[ind_acs_jfc1[0][0]][i]]
  mon_dictionnaire['Production ACS JFC1'] = list_acs_jfc1
  #ACS JFC2
  ind_acs_jfc2 = [(df1[col][df1[col].eq('JFC 2')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('JFC 2')].index))]
  list_acs_jfc2 = []
  for i in range(ind_date[0][1], ind_date[0][1]+int(date_fin[:2])-int(date_debut[:2])+1):
    list_acs_jfc2 += [df1.iloc[ind_acs_jfc2[0][0]][i]]
  mon_dictionnaire['Production ACS JFC2'] = list_acs_jfc2
  #ACS JFC3
  ind_acs_jfc3 = [(df1[col][df1[col].eq('JFC 3')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('JFC 3')].index))]
  list_acs_jfc3 = []
  for i in range(ind_date[0][1], ind_date[0][1]+int(date_fin[:2])-int(date_debut[:2])+1):
    list_acs_jfc3 += [df1.iloc[ind_acs_jfc3[0][0]][i]]
  mon_dictionnaire['Production ACS JFC3'] = list_acs_jfc3
  #ACS JFC4
  ind_acs_jfc4 = [(df1[col][df1[col].eq('JFC 4')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('JFC 4')].index))]
  list_acs_jfc4 = []
  for i in range(ind_date[0][1], ind_date[0][1]+int(date_fin[:2])-int(date_debut[:2])+1):
    list_acs_jfc4 += [df1.iloc[ind_acs_jfc4[0][0]][i]]
  mon_dictionnaire['Production ACS JFC4'] = list_acs_jfc4
  #ACS JFC5
  ind_acs_jfc5 = [(df1[col][df1[col].eq('JFC 5')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('JFC 5')].index))]
  list_acs_jfc5 = []
  for i in range(ind_date[0][1], ind_date[0][1]+int(date_fin[:2])-int(date_debut[:2])+1):
    list_acs_jfc5 += [df1.iloc[ind_acs_jfc5[0][0]][i]]
  mon_dictionnaire['Production ACS JFC5'] = list_acs_jfc5
  #ACS IMACID
  ind_acs_imc = [(df1[col][df1[col].eq('IMACID')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('IMACID')].index))]
  list_acs_imc = []
  for i in range(ind_date[0][1], ind_date[0][1]+int(date_fin[:2])-int(date_debut[:2])+1):
    list_acs_imc += [df1.iloc[ind_acs_imc[0][0]][i]]
  mon_dictionnaire['Production ACS IMACID'] = list_acs_imc
  #ACS PMP
  ind_acs_pmp = [(df1[col][df1[col].eq('PMP')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('PMP')].index))]
  list_acs_pmp = []
  for i in range(ind_date[0][1], ind_date[0][1]+int(date_fin[:2])-int(date_debut[:2])+1):
    list_acs_pmp += [df1.iloc[ind_acs_pmp[0][0]][i]]
  mon_dictionnaire['Production ACS PMP'] = list_acs_pmp
  df2 = pd.read_excel(file1, sheet_name='ProductionPlanning')
  df2 = df2.fillna(0)
  df2.columns = df2.columns.astype(str)
  #OIJ
  ind_date_prod = [(df2[col][df2[col].eq(dt_stamp)].index[i], df2.columns.get_loc(col)) for col in df2.columns for i in range(len(df2[col][df2[col].eq(dt_stamp)].index))]
  ind_oij_old = [(df2[col][df2[col].eq('OIJ old')].index[i], df2.columns.get_loc(col)) for col in df2.columns for i in range(len(df2[col][df2[col].eq('OIJ old')].index))]
  ind_oij_new = [(df2[col][df2[col].eq('OIJ new')].index[i], df2.columns.get_loc(col)) for col in df2.columns for i in range(len(df2[col][df2[col].eq('OIJ new')].index))]
  list_oij_old_new = []
  for i in range(ind_date_prod[0][1], ind_date_prod[0][1]+int(date_fin[:2])-int(date_debut[:2])+1):
    oij_old = 0
    oij_new = 0
    for j in range(0, len(ind_oij_old)):
      oij_old += df2.iloc[ind_oij_old[j][0]+1][i]
    for k in range(0, len(ind_oij_new)):
      oij_new += df2.iloc[ind_oij_new[k][0]+1][i]
    list_oij_old_new += [oij_old + oij_new]
  mon_dictionnaire['Volume OIJ old & new'] = list_oij_old_new
  #JFC1
  ind_jfc1 = [(df2[col][df2[col].eq('JFC 1')].index[i], df2.columns.get_loc(col)) for col in df2.columns for i in range(len(df2[col][df2[col].eq('JFC 1')].index))]
  list_jfc1 = []
  for i in range(ind_date_prod[0][1], ind_date_prod[0][1]+int(date_fin[:2])-int(date_debut[:2])+1):
    list_jfc1 += [df2.iloc[ind_jfc1[0][0]+1][i]+df2.iloc[ind_jfc1[1][0]+1][i]]
  mon_dictionnaire['Volume JFC1'] = list_jfc1
  #JFC2
  ind_jfc2 = [(df2[col][df2[col].eq('JFC 2')].index[i], df2.columns.get_loc(col)) for col in df2.columns for i in range(len(df2[col][df2[col].eq('JFC 2')].index))]
  list_jfc2 = []
  for i in range(ind_date_prod[0][1], ind_date_prod[0][1]+int(date_fin[:2])-int(date_debut[:2])+1):
    list_jfc2 += [df2.iloc[ind_jfc2[0][0]+1][i]+df2.iloc[ind_jfc2[1][0]+1][i]]
  mon_dictionnaire['Volume JFC2'] = list_jfc2
  #JFC3
  ind_jfc3 = [(df2[col][df2[col].eq('JFC 3')].index[i], df2.columns.get_loc(col)) for col in df2.columns for i in range(len(df2[col][df2[col].eq('JFC 3')].index))]
  list_jfc3 = []
  for i in range(ind_date_prod[0][1], ind_date_prod[0][1]+int(date_fin[:2])-int(date_debut[:2])+1):
    list_jfc3 += [df2.iloc[ind_jfc3[0][0]+1][i]+df2.iloc[ind_jfc3[1][0]+1][i]]
  mon_dictionnaire['Volume JFC3'] = list_jfc3
  #JFC4
  ind_jfc4 = [(df2[col][df2[col].eq('JFC 4')].index[i], df2.columns.get_loc(col)) for col in df2.columns for i in range(len(df2[col][df2[col].eq('JFC 4')].index))]
  list_jfc4 = []
  for i in range(ind_date_prod[0][1], ind_date_prod[0][1]+int(date_fin[:2])-int(date_debut[:2])+1):
    list_jfc4 += [df2.iloc[ind_jfc4[0][0]+1][i]+df2.iloc[ind_jfc4[1][0]+1][i]]
  mon_dictionnaire['Volume JFC4'] = list_jfc4
  #JFC5
  ind_jfc5 = [(df2[col][df2[col].eq('JFC 5')].index[i], df2.columns.get_loc(col)) for col in df2.columns for i in range(len(df2[col][df2[col].eq('JFC 5')].index))]
  list_jfc5 = []
  for i in range(ind_date_prod[0][1], ind_date_prod[0][1]+int(date_fin[:2])-int(date_debut[:2])+1):
    list_jfc5 += [df2.iloc[ind_jfc5[0][0]+1][i]+df2.iloc[ind_jfc5[1][0]+1][i]]
  mon_dictionnaire['Volume JFC5'] = list_jfc5
  df1 = pd.read_excel(file1, sheet_name='ACP')
  df1 = df1.fillna(0)
  df1.columns = df1.columns.astype(str)
  ind_date = [(df1[col][df1[col].eq(dt_stamp)].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq(dt_stamp)].index))]
  #acp mp3/4
  ind_oij = [(df1[col][df1[col].eq('OIJ')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('OIJ')].index))]
  list_acp29_oij = []
  list_acp54_oij = []
  for i in range(ind_date[0][1], ind_date[0][1]+int(date_fin[:2])-int(date_debut[:2])+1):
    list_acp29_oij += [df1.iloc[ind_oij[0][0]][i]]
    list_acp54_oij += [df1.iloc[ind_oij[0][0]+1][i]]
  mon_dictionnaire['acp29_MP3/4'] = list_acp29_oij
  mon_dictionnaire['acp54_MP3/4'] = list_acp54_oij
  #jfc1
  ind_jfc1 = [(df1[col][df1[col].eq('JFC 1')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('JFC 1')].index))]
  list_acp29_jfc1 = []
  list_acp54_jfc1 = []
  for i in range(ind_date[0][1], ind_date[0][1]+int(date_fin[:2])-int(date_debut[:2])+1):
    list_acp29_jfc1 += [df1.iloc[ind_jfc1[0][0]][i]]
    list_acp54_jfc1 += [df1.iloc[ind_jfc1[0][0]+1][i]]
  mon_dictionnaire['acp29_jfd'] = list_acp29_jfc1
  mon_dictionnaire['acp54_jfd'] = list_acp54_jfc1
  #jfc2
  ind_jfc2 = [(df1[col][df1[col].eq('JFC 2')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('JFC 2')].index))]
  list_acp29_jfc2 = []
  list_acp54_jfc2 = []
  for i in range(ind_date[0][1], ind_date[0][1]+int(date_fin[:2])-int(date_debut[:2])+1):
    list_acp29_jfc2 += [df1.iloc[ind_jfc2[0][0]][i]]
    list_acp54_jfc2 += [df1.iloc[ind_jfc2[0][0]+1][i]]
  mon_dictionnaire['acp29_jff'] = list_acp29_jfc2
  mon_dictionnaire['acp54_jff'] = list_acp54_jfc2
  #jfc3
  ind_jfc3 = [(df1[col][df1[col].eq('JFC 3')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('JFC 3')].index))]
  list_acp29_jfc3 = []
  list_acp54_jfc3 = []
  for i in range(ind_date[0][1], ind_date[0][1]+int(date_fin[:2])-int(date_debut[:2])+1):
    list_acp29_jfc3 += [df1.iloc[ind_jfc3[0][0]][i]]
    list_acp54_jfc3 += [df1.iloc[ind_jfc3[0][0]+1][i]]
  mon_dictionnaire['acp29_jfo'] = list_acp29_jfc3
  mon_dictionnaire['acp54_jfo'] = list_acp54_jfc3
  #jfc4
  ind_jfc4 = [(df1[col][df1[col].eq('JFC 4')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('JFC 4')].index))]
  list_acp29_jfc4 = []
  list_acp54_jfc4 = []
  for i in range(ind_date[0][1], ind_date[0][1]+int(date_fin[:2])-int(date_debut[:2])+1):
    list_acp29_jfc4 += [df1.iloc[ind_jfc4[0][0]][i]]
    list_acp54_jfc4 += [df1.iloc[ind_jfc4[0][0]+1][i]]
  mon_dictionnaire['acp29_jfq'] = list_acp29_jfc4
  mon_dictionnaire['acp54_jfq'] = list_acp54_jfc4
  #jfc5
  ind_jfc5 = [(df1[col][df1[col].eq('JFC 5')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('JFC 5')].index))]
  list_acp29_jfc5 = []
  list_acp54_jfc5 = []
  for i in range(ind_date[0][1], ind_date[0][1]+int(date_fin[:2])-int(date_debut[:2])+1):
    list_acp29_jfc5 += [df1.iloc[ind_jfc5[0][0]][i]]
    list_acp54_jfc5 += [df1.iloc[ind_jfc5[0][0]+1][i]]
  mon_dictionnaire['acp29_jft'] = list_acp29_jfc5
  mon_dictionnaire['acp54_jft'] = list_acp54_jfc5
  #imacid
  ind_imc = [(df1[col][df1[col].eq('IMACID')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('IMACID')].index))]
  list_acp29_imc = []
  list_acp54_imc = []
  for i in range(ind_date[0][1], ind_date[0][1]+int(date_fin[:2])-int(date_debut[:2])+1):
    list_acp29_imc += [df1.iloc[ind_imc[0][0]][i]]
    list_acp54_imc += [df1.iloc[ind_imc[0][0]+1][i]]
  mon_dictionnaire['acp29_imacid'] = list_acp29_imc
  mon_dictionnaire['acp54_imacid'] = list_acp54_imc
  #pmp
  ind_pmp = [(df1[col][df1[col].eq('PMP')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('PMP')].index))]
  list_acp29_pmp = []
  list_acp54_pmp = []
  for i in range(ind_date[0][1], ind_date[0][1]+int(date_fin[:2])-int(date_debut[:2])+1):
    list_acp29_pmp += [df1.iloc[ind_pmp[0][0]][i]]
    list_acp54_pmp += [df1.iloc[ind_pmp[0][0]+1][i]]
  mon_dictionnaire['acp29_pmp'] = list_acp29_pmp
  mon_dictionnaire['acp54_pmp'] = list_acp54_pmp
  return mon_dictionnaire

#Function 11 : GANT OIS
def extract_forecast_gant_ois(file2, date_debut, date_fin):
  mon_dictionnaire = {}
  df = pd.read_excel(file2)
  df = df.fillna(0)
  df.columns = df.columns.astype(str)
  dt_stamp = datetime.datetime(int(date_debut[6:]), int(date_debut[3:5]), int(date_debut[:2]))
  ind_date = [(df[col][df[col].eq(dt_stamp)].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq(dt_stamp)].index))]
  ind_cadence = [(df[col][df[col].eq('Cadence')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('Cadence')].index))]
  list_cadence_nord = []
  list_cadence_ocp = []
  for i in range(ind_date[0][1], ind_date[0][1]+(int(date_fin[:2])-int(date_debut[:2]))*2+1,2):
    list_cadence_nord += [df.iloc[ind_cadence[0][0]][i]+df.iloc[ind_cadence[0][0]][i+1]]
    list_cadence_ocp += [df.iloc[ind_cadence[2][0]][i]+df.iloc[ind_cadence[2][0]][i+1]]
  mon_dictionnaire['Cadence acide quais nord'] = list_cadence_nord
  mon_dictionnaire['Cadence tsp quais ocp'] = list_cadence_ocp
  return mon_dictionnaire

#Function 12 : Scheduling Roche
def extract_forecast_scheduling_roche(file4, date_debut, date_fin):
  mon_dictionnaire = {}
  df = pd.read_excel(file4, sheet_name='Summary')
  df = df.fillna(0)
  df.columns = df.columns.astype(str)
  dt_stamp = datetime.datetime(int(date_debut[6:]), int(date_debut[3:5]), int(date_debut[:2]))
  ind_date = df.columns.get_loc(str(dt_stamp))
  ind_k02d = [(df[col][df[col].eq('K02D')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('K02D')].index))]
  ind_k09d = [(df[col][df[col].eq('K09D')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('K09D')].index))]
  list_k02d_k09d = []
  list_engrais = []
  for i in range(ind_date, ind_date+(int(date_fin[:2])-int(date_debut[:2]))*2+1,2):
    list_k02d_k09d += [df.iloc[ind_k02d[0][0]][i]+df.iloc[ind_k09d[0][0]][i]]
    f = True
    total = 0
    j = 0
    while f == True:
      while df.iloc[ind_k02d[0][0]-1+j][ind_k02d[0][1]-1] != 'Volume A charger Par Entity':
        if df.iloc[ind_k02d[0][0]-1+j][ind_k02d[0][1]] not in ['K02D', 'K09D']:
          total += df.iloc[ind_k02d[0][0]-1+j][i]
          j += 1
        else:
          j += 1
        f = True
      f = False
    list_engrais += [total]
  mon_dictionnaire['Total roche'] = list_k02d_k09d
  mon_dictionnaire['Total engrais'] = list_engrais
  return mon_dictionnaire

#Function 13 : Simulations
def extract_forecast_simulations(file_path, sheet1, sheet2, sheet3, date_debut, date_fin):
  mon_dictionnaire = {}
  df1 = pd.read_excel(file_path, sheet_name=sheet1)
  df2 = pd.read_excel(file_path, sheet_name=sheet2)
  df3 = pd.read_excel(file_path, sheet_name=sheet3)
  df1 = df1.fillna(0)
  df2 = df2.fillna(0)
  df3 = df3.fillna(0)

  dt_stamp = datetime.datetime(int(date_debut[6:]), int(date_debut[3:5]), int(date_debut[:2]))
  ind_date_1 = [(df1[col][df1[col].eq(dt_stamp)].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq(dt_stamp)].index))]
  ind_date_2 = [(df2[col][df2[col].eq(dt_stamp)].index[i], df2.columns.get_loc(col)) for col in df2.columns for i in range(len(df2[col][df2[col].eq(dt_stamp)].index))]
  ind_date_3 = [(df3[col][df3[col].eq(dt_stamp)].index[i], df3.columns.get_loc(col)) for col in df3.columns for i in range(len(df3[col][df3[col].eq(dt_stamp)].index))]

  #Stock ACP à ICS/PI à 7h. (TS)
  ind_stock_ACP = [(df1[col][df1[col].eq('Stock ACP à ICS/PI à 7h. (TS)')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('Stock ACP à ICS/PI à 7h. (TS)')].index))]
  N = []
  BG_special_BG = []
  FeeD = []
  Low_Sulfate = []
  for i in range(ind_date_1[0][0], ind_date_1[0][0]+int(date_fin[:2])-int(date_debut[:2])+1):
    N += [(df1.iloc[i][ind_stock_ACP[0][1]])*0.535]
    BG_special_BG += [(df1.iloc[i][ind_stock_ACP[0][1]+1] + df1.iloc[i][ind_stock_ACP[0][1]+2])*0.535]
    FeeD += [(df1.iloc[i][ind_stock_ACP[0][1]+3])*0.535]
    Low_Sulfate += [(df1.iloc[i][ind_stock_ACP[0][1]+4])*0.535]
  mon_dictionnaire["N"] = N
  mon_dictionnaire["BG_special_BG"] = BG_special_BG
  mon_dictionnaire["FeeD"] = FeeD
  mon_dictionnaire["Low_Sulfate"] = Low_Sulfate

  #Brouettage usine-port (TS)
  ind_brouettage = [(df1[col][df1[col].eq('Brouettage usine-port (TS)')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('Brouettage usine-port (TS)')].index))]
  total_brouettage = []
  for i in range(ind_date_1[0][0], ind_date_1[0][0]+int(date_fin[:2])-int(date_debut[:2])+1):
    total_brouettage += [(df1.iloc[i][ind_brouettage[0][1]+9])*0.535]
  mon_dictionnaire["total_brouettage"] = total_brouettage

  #Transfert
  ind_transfert = [(df2[col][df2[col].eq('Transfert')].index[i], df2.columns.get_loc(col)) for col in df2.columns for i in range(len(df2[col][df2[col].eq('Transfert')].index))]
  total_transfert = []
  for i in range(ind_date_2[0][0], ind_date_2[0][0]+int(date_fin[:2])-int(date_debut[:2])+1):
    total_transfert += [df2.iloc[i][ind_transfert[0][1]+4]]
  mon_dictionnaire["total_transfert"] = total_transfert

  #Stock port
  ind_stock_port = [(df2[col][df2[col].eq('Stock port')].index[i], df2.columns.get_loc(col)) for col in df2.columns for i in range(len(df2[col][df2[col].eq('Stock port')].index))]
  total_stock_port = []
  for i in range(ind_date_2[0][0], ind_date_2[0][0]+int(date_fin[:2])-int(date_debut[:2])+1):
    total_stock_port += [df2.iloc[i][ind_stock_port[1][1]+2]]
  mon_dictionnaire["total_stock_port"] = total_stock_port

  #Déchargement
  ind_dechargement = [(df3[col][df3[col].eq('Déchargement')].index[i], df3.columns.get_loc(col)) for col in df3.columns for i in range(len(df3[col][df3[col].eq('Déchargement')].index))]
  valeur = []
  for i in range(ind_date_3[0][0], ind_date_3[0][0]+int(date_fin[:2])-int(date_debut[:2])+1):
    valeur += [df3.iloc[i][ind_dechargement[0][1]]]
  mon_dictionnaire["dechargement"] = valeur
  return mon_dictionnaire

#Function 14 : Template CM-Flux-Port
def extract_forecast_template_cm(file5, date_debut, date_fin):
  mon_dictionnaire = {}
  df = pd.read_excel(file5, sheet_name='SYN')
  df = df.fillna(0)
  dt_stamp = datetime.datetime(int(date_debut[6:]), int(date_debut[3:5]), int(date_debut[:2]))
  ind_date = [(df[col][df[col].eq(dt_stamp)].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq(dt_stamp)].index))]
  ind_cellules = [(df[col][df[col].eq('Cellules')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('Cellules')].index))]
  ind_lot3 = [(df[col][df[col].eq('Lot 3')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('Lot 3')].index))]
  ind_charg = [(df[col][df[col].eq('Chargement')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('Chargement')].index))]
  list_cellules = []
  list_lot3 = []
  list_charg = []
  for i in range(ind_date[0][1], ind_date[0][1]+int(date_fin[:2])-int(date_debut[:2])+1):
    list_cellules += [df.iloc[ind_cellules[0][0]][i]]
    list_lot3 += [df.iloc[ind_lot3[0][0]][i]]
    list_charg += [df.iloc[ind_charg[0][0]][i]]
  mon_dictionnaire['Stock cellules'] = list_cellules
  mon_dictionnaire['Stock lot 3'] = list_lot3
  mon_dictionnaire['Stock chargement'] = list_charg
  df1 = pd.read_excel(file5, sheet_name='Trains et Chargement')
  df1 = df1.fillna(0)
  ind_date1 = [(df1[col][df1[col].eq(dt_stamp)].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq(dt_stamp)].index))] 
  ind_trains = [(df1[col][df1[col].eq('N Trains Casa')].index[i], df1.columns.get_loc(col)) for col in df1.columns for i in range(len(df1[col][df1[col].eq('N Trains Casa')].index))]
  list_nb_trains = []
  list_vol_trains = []
  for i in range(ind_date1[0][1], ind_date1[0][1]+int(date_fin[:2])-int(date_debut[:2])+1):
    list_nb_trains += [df1.iloc[ind_trains[0][0]][i]]
    list_vol_trains += [df1.iloc[ind_trains[0][0]][i]*3700]
  mon_dictionnaire['Nb de trains Casa'] = list_nb_trains
  mon_dictionnaire['Volume de trains Casa'] = list_vol_trains
  return mon_dictionnaire

#Function 15 : BI Daily OIK
def forecast_BI_OIK(file_path, date_debut, date_fin):
  mon_dictionnaire = {}
  day = int(date_debut[0:2])
  sheets = ['Extraction','Epierrage','Lavage','Séchage','Reprise']
  for sheet in sheets:
    df = pd.read_excel(file_path , sheet_name=sheet)
    df = df.fillna(0)
    ind = [(df[col][df[col].eq('BA')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('BA')].index))]
    mea = 'forecast' + sheet + '_' + 'MEA'
    ba = 'forecast' + sheet + '_' + 'BA'
    daoui = 'forecast' + sheet + '_' + 'DAOUI'
    sc = 'forecast' + sheet + '_' + 'SC'
    BA = []
    DAOUI = []
    MEA = []
    SC = []
    if sheet not in ['Séchage','Lavage']:
      for i in range(ind[0][0]+day, ind[0][0]+day+int(date_fin[:2])-int(date_debut[:2])+1):
        BA += [df.iloc[i,ind[0][1]]]
        DAOUI += [df.iloc[i,ind[0][1]+1]]
        MEA += [df.iloc[i,ind[0][1]+2]]
        SC += [df.iloc[i,ind[0][1]+3]]
      mon_dictionnaire[ba] = BA
      mon_dictionnaire[daoui] = DAOUI
      mon_dictionnaire[mea] = MEA
      mon_dictionnaire[sc] = SC
    elif sheet == 'Lavage':
      ind = [(df[col][df[col].eq('MEA')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('MEA')].index))]
      for i in range(ind[0][0]+day, ind[0][0]+day+int(date_fin[:2])-int(date_debut[:2])+1):
        BA += [df.iloc[i,ind[0][1]]]
        DAOUI += [df.iloc[i,ind[0][1]+1]]
        MEA += [df.iloc[i,ind[0][1]+2]]
      mon_dictionnaire[ba] = BA
      mon_dictionnaire[daoui] = DAOUI
      mon_dictionnaire[mea] = MEA
    elif sheet == 'Séchage':
      ind = [(df[col][df[col].eq('BENI IDIR')].index[i], df.columns.get_loc(col)) for col in df.columns for i in range(len(df[col][df[col].eq('BENI IDIR')].index))]
      bi = 'forecast' + sheet + '_' + 'BI'
      dws = 'forecast' + sheet + '_' + 'DWS'
      BI = []
      DWS = []
      for i in range(ind[0][0]+day, ind[0][0]+day+int(date_fin[:2])-int(date_debut[:2])+1):
        BI += [df.iloc[i,ind[0][1]]]
        DWS += [df.iloc[i,ind[0][1]+1]]
      mon_dictionnaire[bi] = BI
      mon_dictionnaire[dws] = DWS
  return mon_dictionnaire

def create_dict(date):
  return {'BG_special_BG': (133,int(date[0:2])+4),
        'Epierrage_BA': (14,int(date[0:2])+4),
        'Epierrage_DAOUI': (15,int(date[0:2])+4),
        'Epierrage_MEA': (13,int(date[0:2])+4),
        'Epierrage_SC': (16,int(date[0:2])+4),
        'Extraction_BA': (4,int(date[0:2])+4),
        'Extraction_DAOUI': (5,int(date[0:2])+4),
        'Extraction_MEA': (3,int(date[0:2])+4),
        'Extraction_SC': (6,int(date[0:2])+4),
        'FeeD': (134,int(date[0:2])+4),
        'Lavage_BA': (19,int(date[0:2])+4),
        'Lavage_DAOUI': (20,int(date[0:2])+4),
        'Lavage_MEA': (18,int(date[0:2])+4),
        'Low_Sulfate': (135,int(date[0:2])+4),
        'N': (132,int(date[0:2])+4),
        'Reprise_BA': (9,int(date[0:2])+4),
        'Reprise_DAOUI': (10,int(date[0:2])+4),
        'Reprise_MEA': (8,int(date[0:2])+4),
        'Reprise_SC': (11,int(date[0:2])+4),
        'Reste Soufre à Décharger aux Quais': (198,int(date[0:2])+4),
        'Reste à charger aux quais engrais': (116,int(date[0:2])+4),
        'Séchage_BI': (22,int(date[0:2])+4),
        'Séchage_DWS': (24,int(date[0:2])+4),
        'Tonnage Engrais en rade': (115,int(date[0:2])+4),
        'Tonnage Phosphate en rade': (191,int(date[0:2])+4),
        'Tonnage Soufre en Rade ': (56,int(date[0:2])+4),
        'annoncés_tonnage': (165,int(date[0:2])+4),
        'calcination_OIG': (42,int(date[0:2])+4),
        'criblage_BG': (30,int(date[0:2])+4),
        'criblage_BOUCHANE': (31,int(date[0:2])+4),
        'criblage_MZINDA': (32,int(date[0:2])+4),
        'dechargement': (118,int(date[0:2])+4),
        'extract_BG': (26,int(date[0:2])+4),
        'extract_BOUCHANE': (27,int(date[0:2])+4),
        'extract_MZINDA': (28,int(date[0:2])+4),
        'lavage_OIG': (38,int(date[0:2])+4),
        'nb_trains_déchargés': (158,int(date[0:2])+4),
        'nb_trains_réalisés': (157,int(date[0:2])+4),
        'non_prêts_charger': (166,int(date[0:2])+4),
        'prod_H2SO4': (126,int(date[0:2])+4),
        'prod_P2O5_30': (128,int(date[0:2])+4),
        'prod_P2O5_54': (130,int(date[0:2])+4),
        'prod_TSP': (142,int(date[0:2])+4),
        'prod_soufre_liq': (120,int(date[0:2])+4),
        'prêts_charger': (167,int(date[0:2])+4),
        'reprise_BG': (34,int(date[0:2])+4),
        'reprise_BOUCHANE': (35,int(date[0:2])+4),
        'reprise_MZINDA': (36,int(date[0:2])+4),
        'sechage_OIG': (40,int(date[0:2])+4),
        'stock_prenable_7h00': (162,int(date[0:2])+4),
        'stock_prenable_mort_7h00': (160,int(date[0:2])+4),
        'tonnage_mesuré': (164,int(date[0:2])+4),
        'tonnage_trains_déchargés': (156,int(date[0:2])+4),
        'total_brouettage': (122,int(date[0:2])+4),
        'total_stock_port': (144,int(date[0:2])+4),
        'total_transfert': (124,int(date[0:2])+4),
        'Somme quantités Navires attendus Export Liquide': (96,int(date[0:2])+4),
        'Tonnage Acide en rade': (97,int(date[0:2])+4),
        'Reste à charger aux quais phos': (192,int(date[0:2])+4),
        'Somme phosphates': (190,int(date[0:2])+4),
        'Somme ACS reste à charger': (73,int(date[0:2])+4),
        'Reste Acide à charger aux quais': (98,int(date[0:2])+4),
        'Quantité SFR SLD': (55,int(date[0:2])+4),
        'Somme ACS attendus': (71,int(date[0:2])+4),
        'Somme ACS en attente': (72,int(date[0:2])+4),
        'Somme engrais': (114,int(date[0:2])+4),
        'Chargement ACP IMC': (202,int(date[0:2])+4),
        'Chargement ACP JLN - JLS': (201,int(date[0:2])+4),
        'Chargement ACP PMP': (203,int(date[0:2])+4),
        'Chargement Engrais': (111,int(date[0:2])+4),
        'Chargement Phosphate': (194,int(date[0:2])+4),
        'Déchargement Soufre Solide': (52,int(date[0:2])+4),
        'Export Camion': (204,int(date[0:2])+4),
        'Production ACP29 IMC': (81,int(date[0:2])+4),
        'Production ACP29 JFD': (77,int(date[0:2])+4),
        'Production ACP29 JFF': (80,int(date[0:2])+4),
        'Production ACP29 JFO': (76,int(date[0:2])+4),
        'Production ACP29 JFQ': (79,int(date[0:2])+4),
        'Production ACP29 JFT': (78,int(date[0:2])+4),
        'Production ACP29 Nord': (75,int(date[0:2])+4),
        'Production ACP29 PMP': (82,int(date[0:2])+4),
        'Production ACP54 IMC': (91,int(date[0:2])+4),
        'Production ACP54 JFD': (194,int(date[0:2])+4),
        'Production ACP54 JFF': (89,int(date[0:2])+4),
        'Production ACP54 JFO': (85,int(date[0:2])+4),
        'Production ACP54 JFQ': (88,int(date[0:2])+4),
        'Production ACP54 JFT': (87,int(date[0:2])+4),
        'Production ACP54 Nord': (84,int(date[0:2])+4),
        'Production ACP54 PMP': (90,int(date[0:2])+4),
        'Production ACS IMC': (65,int(date[0:2])+4),
        'Production ACS JFD': (62,int(date[0:2])+4),
        'Production ACS JFF': (60,int(date[0:2])+4),
        'Production ACS JFO': (61,int(date[0:2])+4),
        'Production ACS JFQ': (64,int(date[0:2])+4),
        'Production ACS JFT': (63,int(date[0:2])+4),
        'Production ACS Nord': (59,int(date[0:2])+4),
        'Production ACS PMP': (66,int(date[0:2])+4),
        'Production Engrais JFD': (102,int(date[0:2])+4),
        'Production Engrais JFF': (105,int(date[0:2])+4),
        'Production Engrais JFO': (101,int(date[0:2])+4),
        'Production Engrais JFQ': (104,int(date[0:2])+4),
        'Production Engrais JFT': (103,int(date[0:2])+4),
        'Production Engrais Nord': (100,int(date[0:2])+4),
        'Production Soufre Liquide': (50,int(date[0:2])+4),
        'Stock Soufre liquide': (206,int(date[0:2])+4),
        'Stock Soufre solide': (54,int(date[0:2])+4),
        'Stock acide sulfirique': (70,int(date[0:2])+4),
        'Stock engrais': (108,int(date[0:2])+4),
        'TOTAL P2O5': (95,int(date[0:2])+4),
        'A. Phosphorique': (137,int(date[0:2])+4),
        'Expéditions Phosphates': (148,int(date[0:2])+4),
        'Expéditions TSP': (146,int(date[0:2])+4),
        'Reception Phosphates': (205,int(date[0:2])+4)}

def create_dict_forecast(date_debut):
  return {'Fusion': (120,int(date_debut[0:2])+4),
 'Production ACS IMACID': (65,int(date_debut[0:2])+4),
 'Production ACS JFC1': (62,int(date_debut[0:2])+4),
 'Production ACS JFC2': (60,int(date_debut[0:2])+4),
 'Production ACS JFC3': (61,int(date_debut[0:2])+4),
 'Production ACS JFC4': (64,int(date_debut[0:2])+4),
 'Production ACS JFC5': (63,int(date_debut[0:2])+4),
 'Production ACS OIJ': (59,int(date_debut[0:2])+4),
 'Production ACS PMP': (66,int(date_debut[0:2])+4),
 'Volume JFC1': (102,int(date_debut[0:2])+4),
 'Volume JFC2': (105,int(date_debut[0:2])+4),
 'Volume JFC3': (101,int(date_debut[0:2])+4),
 'Volume JFC4': (104,int(date_debut[0:2])+4),
 'Volume JFC5': (103,int(date_debut[0:2])+4),
 'Volume OIJ old & new': (100,int(date_debut[0:2])+4),
 'acp29_MP3/4': (75,int(date_debut[0:2])+4),
 'acp29_imacid': (81,int(date_debut[0:2])+4),
 'acp29_jfd': (77,int(date_debut[0:2])+4),
 'acp29_jff': (80,int(date_debut[0:2])+4),
 'acp29_jfo': (76,int(date_debut[0:2])+4),
 'acp29_jfq': (79,int(date_debut[0:2])+4),
 'acp29_jft': (78,int(date_debut[0:2])+4),
 'acp29_pmp': (82,int(date_debut[0:2])+4),
 'acp54_MP3/4': (84,int(date_debut[0:2])+4),
 'acp54_imacid': (91,int(date_debut[0:2])+4),
 'acp54_jfd': (86,int(date_debut[0:2])+4),
 'acp54_jff': (89,int(date_debut[0:2])+4),
 'acp54_jfo': (85,int(date_debut[0:2])+4),
 'acp54_jfq': (88,int(date_debut[0:2])+4),
 'acp54_jft': (87,int(date_debut[0:2])+4),
 'acp54_pmp': (90,int(date_debut[0:2])+4),
 'Cadence acide quais nord': (137,int(date_debut[0:2])+4),
 'Cadence tsp quais ocp': (146,int(date_debut[0:2])+4),
 'Total engrais': (111,int(date_debut[0:2])+4),
 'Total roche': (194,int(date_debut[0:2])+4), 
 'BG_special_BG': (133,int(date_debut[0:2])+4),
 'FeeD': (134,int(date_debut[0:2])+4),
 'Low_Sulfate': (135,int(date_debut[0:2])+4),
 'N': (132,int(date_debut[0:2])+4),
 'dechargement': (118,int(date_debut[0:2])+4),
 'total_brouettage': (122,int(date_debut[0:2])+4),
 'total_stock_port': (144,int(date_debut[0:2])+4),
 'total_transfert': (124,int(date_debut[0:2])+4),
 'Nb de trains Casa': (157,int(date_debut[0:2])+4),
 'Stock cellules': (160,int(date_debut[0:2])+4),
 'Stock chargement': (164,int(date_debut[0:2])+4),
 'Stock lot 3': (162,int(date_debut[0:2])+4),
 'Volume de trains Casa': (207,int(date_debut[0:2])+4),
 'forecastEpierrage_BA': (14,int(date_debut[0:2])+4),
 'forecastEpierrage_DAOUI': (15,int(date_debut[0:2])+4),
 'forecastEpierrage_MEA': (13,int(date_debut[0:2])+4),
 'forecastEpierrage_SC': (16,int(date_debut[0:2])+4),
 'forecastExtraction_BA': (4,int(date_debut[0:2])+4),
 'forecastExtraction_DAOUI': (5,int(date_debut[0:2])+4),
 'forecastExtraction_MEA': (3,int(date_debut[0:2])+4),
 'forecastExtraction_SC': (6,int(date_debut[0:2])+4),
 'forecastLavage_BA': (19,int(date_debut[0:2])+4),
 'forecastLavage_DAOUI': (20,int(date_debut[0:2])+4),
 'forecastLavage_MEA': (18,int(date_debut[0:2])+4),
 'forecastReprise_BA': (9,int(date_debut[0:2])+4),
 'forecastReprise_DAOUI': (10,int(date_debut[0:2])+4),
 'forecastReprise_MEA': (8,int(date_debut[0:2])+4),
 'forecastReprise_SC': (11,int(date_debut[0:2])+4),
 'forecastSéchage_BI': (22,int(date_debut[0:2])+4),
 'forecastSéchage_DWS': (24,int(date_debut[0:2])+4)}

#Final Function
def fill_suivi_quotidien(file1, file2, file3, file4, file5, file6, file7, file8, file9, sheet_file2, sheet1_file3, sheet2_file3, sheet3_file3, date):
  a = extract_rapport_journalier(file1)
  b = extract_suivi_production(file2, sheet_file2, date)
  c = extract_simulations(file3, sheet1_file3, sheet2_file3, sheet3_file3, date)
  d = read_reporting_gantour(file4, date)
  e = extract_BI_OIK(file5, date)
  f = extract_situation_journaliere(file6)
  g = extract_situation_excel(file7, date)
  h = extract_etat_stock(file8)
  i = extract_rj(file9)
  extracted_values1 = {**a, **b, **c, **d, **e, **f, **g, **h, **i}
  dict_index1 = create_dict(date)
  #output
  sh = gc.open('Suivi Quotidien')
  worksheet = sh.worksheet("Feuille 1")
  for x in extracted_values1:
    worksheet.update_cell(dict_index1[x][0], dict_index1[x][1], extracted_values1[x])

#Final Function Forecast
def fill_forecast_suivi_quotidien(file3, file5, file10, file11, file12, file13, sheet_file2, sheet1_file3, sheet2_file3, sheet3_file3, date_debut, date_fin):
  j = extract_forecast_inventory(file10, date_debut, date_fin)
  k = extract_forecast_gant_ois(file11, date_debut, date_fin)
  l = extract_forecast_scheduling_roche(file12, date_debut, date_fin)
  m = extract_forecast_template_cm(file13, date_debut, date_fin)
  n = extract_forecast_simulations(file3, sheet1_file3, sheet2_file3, sheet3_file3, date_debut, date_fin)
  o = forecast_BI_OIK(file5, date_debut, date_fin)
  dict_index2 = create_dict_forecast(date_debut)
  extracted_values2 = {**j, **k, **l, **m, **n, **o}
  #output
  sh = gc.open('Suivi Quotidien')
  worksheet = sh.worksheet("Feuille 1")
  for x in extracted_values2:
    for r in range(0,int(date_fin[:2])-int(date_debut[:2])+1):
      worksheet.update_cell(dict_index2[x][0], dict_index2[x][1]+r, extracted_values2[x][r])

#Inputs
file1 = '/content/Rapport journalier du 25 Aout 2021.xlsx'
file2 = '/content/SUIVI DE LA PRODUCTION OIS 2021.xls'
file3 = '/content/Simulations  au  25 08 21.xlsx'
file4 = '/content/Reporting Supply chain GANTOUR Août 21.xlsx'
file5 = '/content/BI- Daily OIK V25082021.xlsx'
file6 = '/content/Situation journalière du 25-08-2021.xlsx'
file7 = '/content/SITUATION EXCEL.xlsx'
file8 = '/content/ETAT DE STOCK PLATEFORME.xlsx'
file9 = '/content/RJ 25-08-2021.xls'
file10 = '/content/20210826 Inventory Projection.xlsm'
file11 = '/content/GANTT OIS  23082021.xlx.xlsx'
file12 = '/content/Scheduling RocheFrtls 26082021.xlsm'
file13 = '/content/Template CM-Flux-Port - 250821.xlsx'
sheet_file2 = 'Août 2021'
sheet1_file3 = 'ACP Aout sc 1' 
sheet2_file3 = 'TSP Aout '
sheet3_file3 = 'Simuation dech Soufre (2)'

#Fill today's values
fill_suivi_quotidien(file1, file2, file3, file4, file5, file6, file7, file8, file9, sheet_file2, sheet1_file3, sheet2_file3, sheet3_file3, '25/08/2021' )

#Fill forecast values
date_debut = '26/08/2021'
date_fin = '31/08/2021'
fill_forecast_suivi_quotidien(file3, file5, file10, file11, file12, file13, sheet_file2, sheet1_file3, sheet2_file3, sheet3_file3, date_debut, date_fin)